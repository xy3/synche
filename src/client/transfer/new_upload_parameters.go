// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNewUploadParams creates a new NewUploadParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNewUploadParams() *NewUploadParams {
	return &NewUploadParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNewUploadParamsWithTimeout creates a new NewUploadParams object
// with the ability to set a timeout on a request.
func NewNewUploadParamsWithTimeout(timeout time.Duration) *NewUploadParams {
	return &NewUploadParams{
		timeout: timeout,
	}
}

// NewNewUploadParamsWithContext creates a new NewUploadParams object
// with the ability to set a context for a request.
func NewNewUploadParamsWithContext(ctx context.Context) *NewUploadParams {
	return &NewUploadParams{
		Context: ctx,
	}
}

// NewNewUploadParamsWithHTTPClient creates a new NewUploadParams object
// with the ability to set a custom HTTPClient for a request.
func NewNewUploadParamsWithHTTPClient(client *http.Client) *NewUploadParams {
	return &NewUploadParams{
		HTTPClient: client,
	}
}

/* NewUploadParams contains all the parameters to send to the API endpoint
   for the new upload operation.

   Typically these are written to a http.Request.
*/
type NewUploadParams struct {

	/* DirectoryID.

	   the target storage directory for the file. Leave blank to upload to your home directory

	   Format: uint
	*/
	DirectoryID *uint64

	/* FileHash.

	   the hash of the entire file
	*/
	FileHash string

	/* FileName.

	   the original name of the file
	*/
	FileName string

	/* FileSize.

	   the size of the file in bits
	*/
	FileSize int64

	/* NumChunks.

	   the number of chunks the server should expect
	*/
	NumChunks int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the new upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NewUploadParams) WithDefaults() *NewUploadParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the new upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NewUploadParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the new upload params
func (o *NewUploadParams) WithTimeout(timeout time.Duration) *NewUploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the new upload params
func (o *NewUploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the new upload params
func (o *NewUploadParams) WithContext(ctx context.Context) *NewUploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the new upload params
func (o *NewUploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the new upload params
func (o *NewUploadParams) WithHTTPClient(client *http.Client) *NewUploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the new upload params
func (o *NewUploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirectoryID adds the directoryID to the new upload params
func (o *NewUploadParams) WithDirectoryID(directoryID *uint64) *NewUploadParams {
	o.SetDirectoryID(directoryID)
	return o
}

// SetDirectoryID adds the directoryId to the new upload params
func (o *NewUploadParams) SetDirectoryID(directoryID *uint64) {
	o.DirectoryID = directoryID
}

// WithFileHash adds the fileHash to the new upload params
func (o *NewUploadParams) WithFileHash(fileHash string) *NewUploadParams {
	o.SetFileHash(fileHash)
	return o
}

// SetFileHash adds the fileHash to the new upload params
func (o *NewUploadParams) SetFileHash(fileHash string) {
	o.FileHash = fileHash
}

// WithFileName adds the fileName to the new upload params
func (o *NewUploadParams) WithFileName(fileName string) *NewUploadParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the new upload params
func (o *NewUploadParams) SetFileName(fileName string) {
	o.FileName = fileName
}

// WithFileSize adds the fileSize to the new upload params
func (o *NewUploadParams) WithFileSize(fileSize int64) *NewUploadParams {
	o.SetFileSize(fileSize)
	return o
}

// SetFileSize adds the fileSize to the new upload params
func (o *NewUploadParams) SetFileSize(fileSize int64) {
	o.FileSize = fileSize
}

// WithNumChunks adds the numChunks to the new upload params
func (o *NewUploadParams) WithNumChunks(numChunks int64) *NewUploadParams {
	o.SetNumChunks(numChunks)
	return o
}

// SetNumChunks adds the numChunks to the new upload params
func (o *NewUploadParams) SetNumChunks(numChunks int64) {
	o.NumChunks = numChunks
}

// WriteToRequest writes these params to a swagger request
func (o *NewUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DirectoryID != nil {

		// query param directoryID
		var qrDirectoryID uint64

		if o.DirectoryID != nil {
			qrDirectoryID = *o.DirectoryID
		}
		qDirectoryID := swag.FormatUint64(qrDirectoryID)
		if qDirectoryID != "" {

			if err := r.SetQueryParam("directoryID", qDirectoryID); err != nil {
				return err
			}
		}
	}

	// query param fileHash
	qrFileHash := o.FileHash
	qFileHash := qrFileHash
	if qFileHash != "" {

		if err := r.SetQueryParam("fileHash", qFileHash); err != nil {
			return err
		}
	}

	// query param fileName
	qrFileName := o.FileName
	qFileName := qrFileName
	if qFileName != "" {

		if err := r.SetQueryParam("fileName", qFileName); err != nil {
			return err
		}
	}

	// query param fileSize
	qrFileSize := o.FileSize
	qFileSize := swag.FormatInt64(qrFileSize)
	if qFileSize != "" {

		if err := r.SetQueryParam("fileSize", qFileSize); err != nil {
			return err
		}
	}

	// query param numChunks
	qrNumChunks := o.NumChunks
	qNumChunks := swag.FormatInt64(qrNumChunks)
	if qNumChunks != "" {

		if err := r.SetQueryParam("numChunks", qNumChunks); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
