// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xy3/synche/src/client/models"
)

// NewUploadReader is a Reader for the NewUpload structure.
type NewUploadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NewUploadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNewUploadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewNewUploadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewNewUploadNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewNewUploadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNewUploadOK creates a NewUploadOK with default headers values
func NewNewUploadOK() *NewUploadOK {
	return &NewUploadOK{}
}

/* NewUploadOK describes a response with status code 200, with default header values.

OK
*/
type NewUploadOK struct {
	Payload *models.File
}

func (o *NewUploadOK) Error() string {
	return fmt.Sprintf("[POST /upload/new][%d] newUploadOK  %+v", 200, o.Payload)
}
func (o *NewUploadOK) GetPayload() *models.File {
	return o.Payload
}

func (o *NewUploadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNewUploadUnauthorized creates a NewUploadUnauthorized with default headers values
func NewNewUploadUnauthorized() *NewUploadUnauthorized {
	return &NewUploadUnauthorized{}
}

/* NewUploadUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type NewUploadUnauthorized struct {
}

func (o *NewUploadUnauthorized) Error() string {
	return fmt.Sprintf("[POST /upload/new][%d] newUploadUnauthorized ", 401)
}

func (o *NewUploadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNewUploadNotImplemented creates a NewUploadNotImplemented with default headers values
func NewNewUploadNotImplemented() *NewUploadNotImplemented {
	return &NewUploadNotImplemented{}
}

/* NewUploadNotImplemented describes a response with status code 501, with default header values.

Not implemented
*/
type NewUploadNotImplemented struct {
}

func (o *NewUploadNotImplemented) Error() string {
	return fmt.Sprintf("[POST /upload/new][%d] newUploadNotImplemented ", 501)
}

func (o *NewUploadNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNewUploadDefault creates a NewUploadDefault with default headers values
func NewNewUploadDefault(code int) *NewUploadDefault {
	return &NewUploadDefault{
		_statusCode: code,
	}
}

/* NewUploadDefault describes a response with status code -1, with default header values.

Error
*/
type NewUploadDefault struct {
	_statusCode int

	Payload models.Error
}

// Code gets the status code for the new upload default response
func (o *NewUploadDefault) Code() int {
	return o._statusCode
}

func (o *NewUploadDefault) Error() string {
	return fmt.Sprintf("[POST /upload/new][%d] newUpload default  %+v", o._statusCode, o.Payload)
}
func (o *NewUploadDefault) GetPayload() models.Error {
	return o.Payload
}

func (o *NewUploadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
