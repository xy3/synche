// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transfer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transfer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckUploadedChunks(params *CheckUploadedChunksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckUploadedChunksOK, error)

	DownloadFile(params *DownloadFileParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadFileOK, error)

	NewUpload(params *NewUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NewUploadOK, error)

	UploadChunk(params *UploadChunkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadChunkCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckUploadedChunks gets the chunks that are already on the server
*/
func (a *Client) CheckUploadedChunks(params *CheckUploadedChunksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckUploadedChunksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckUploadedChunksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkUploadedChunks",
		Method:             "POST",
		PathPattern:        "/upload/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckUploadedChunksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckUploadedChunksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckUploadedChunksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DownloadFile downloads a file
*/
func (a *Client) DownloadFile(params *DownloadFileParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadFile",
		Method:             "GET",
		PathPattern:        "/download/{fileID}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadFileReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownloadFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NewUpload creates a new file upload

  To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file
*/
func (a *Client) NewUpload(params *NewUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NewUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "newUpload",
		Method:             "POST",
		PathPattern:        "/upload/new",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NewUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NewUploadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UploadChunk uploads a file chunk

  Uploads a new chunk to the Synche server
*/
func (a *Client) UploadChunk(params *UploadChunkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadChunkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadChunkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadChunk",
		Method:             "POST",
		PathPattern:        "/upload/chunk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadChunkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadChunkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UploadChunkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
