// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRegisterParams creates a new RegisterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRegisterParams() *RegisterParams {
	return &RegisterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterParamsWithTimeout creates a new RegisterParams object
// with the ability to set a timeout on a request.
func NewRegisterParamsWithTimeout(timeout time.Duration) *RegisterParams {
	return &RegisterParams{
		timeout: timeout,
	}
}

// NewRegisterParamsWithContext creates a new RegisterParams object
// with the ability to set a context for a request.
func NewRegisterParamsWithContext(ctx context.Context) *RegisterParams {
	return &RegisterParams{
		Context: ctx,
	}
}

// NewRegisterParamsWithHTTPClient creates a new RegisterParams object
// with the ability to set a custom HTTPClient for a request.
func NewRegisterParamsWithHTTPClient(client *http.Client) *RegisterParams {
	return &RegisterParams{
		HTTPClient: client,
	}
}

/* RegisterParams contains all the parameters to send to the API endpoint
   for the register operation.

   Typically these are written to a http.Request.
*/
type RegisterParams struct {

	// Email.
	Email string

	// Name.
	Name *string

	// Password.
	Password string

	// Picture.
	Picture *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the register params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RegisterParams) WithDefaults() *RegisterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the register params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RegisterParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the register params
func (o *RegisterParams) WithTimeout(timeout time.Duration) *RegisterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register params
func (o *RegisterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register params
func (o *RegisterParams) WithContext(ctx context.Context) *RegisterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register params
func (o *RegisterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register params
func (o *RegisterParams) WithHTTPClient(client *http.Client) *RegisterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register params
func (o *RegisterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the register params
func (o *RegisterParams) WithEmail(email string) *RegisterParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the register params
func (o *RegisterParams) SetEmail(email string) {
	o.Email = email
}

// WithName adds the name to the register params
func (o *RegisterParams) WithName(name *string) *RegisterParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the register params
func (o *RegisterParams) SetName(name *string) {
	o.Name = name
}

// WithPassword adds the password to the register params
func (o *RegisterParams) WithPassword(password string) *RegisterParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the register params
func (o *RegisterParams) SetPassword(password string) {
	o.Password = password
}

// WithPicture adds the picture to the register params
func (o *RegisterParams) WithPicture(picture *string) *RegisterParams {
	o.SetPicture(picture)
	return o
}

// SetPicture adds the picture to the register params
func (o *RegisterParams) SetPicture(picture *string) {
	o.Picture = picture
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param email
	qrEmail := o.Email
	qEmail := qrEmail
	if qEmail != "" {

		if err := r.SetQueryParam("email", qEmail); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	// query param password
	qrPassword := o.Password
	qPassword := qrPassword
	if qPassword != "" {

		if err := r.SetQueryParam("password", qPassword); err != nil {
			return err
		}
	}

	if o.Picture != nil {

		// query param picture
		var qrPicture string

		if o.Picture != nil {
			qrPicture = *o.Picture
		}
		qPicture := qrPicture
		if qPicture != "" {

			if err := r.SetQueryParam("picture", qPicture); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
