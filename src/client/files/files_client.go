// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new files API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for files API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDirPath(params *CreateDirPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDirPathOK, error)

	CreateDirectory(params *CreateDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDirectoryOK, error)

	DeleteDirPath(params *DeleteDirPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDirPathOK, error)

	DeleteDirectory(params *DeleteDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDirectoryOK, error)

	DeleteFile(params *DeleteFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFileOK, error)

	DeleteFilepath(params *DeleteFilepathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilepathOK, error)

	GetFileInfo(params *GetFileInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileInfoOK, error)

	GetFilePathInfo(params *GetFilePathInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePathInfoOK, error)

	ListDirPathInfo(params *ListDirPathInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDirPathInfoOK, error)

	ListDirectory(params *ListDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDirectoryOK, error)

	ListHomeDirectory(params *ListHomeDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHomeDirectoryOK, error)

	UpdateFileByID(params *UpdateFileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFileByIDOK, error)

	UpdateFileByPath(params *UpdateFileByPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFileByPathOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDirPath creates a new directory
*/
func (a *Client) CreateDirPath(params *CreateDirPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDirPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDirPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDirPath",
		Method:             "PUT",
		PathPattern:        "/directoryPath/{dirPath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDirPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDirPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDirPathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateDirectory creates a new directory
*/
func (a *Client) CreateDirectory(params *CreateDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDirectory",
		Method:             "PUT",
		PathPattern:        "/directory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteDirPath removes a certain directory
*/
func (a *Client) DeleteDirPath(params *DeleteDirPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDirPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDirPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDirPath",
		Method:             "DELETE",
		PathPattern:        "/directoryPath/{dirPath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDirPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDirPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDirPathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteDirectory removes a certain directory
*/
func (a *Client) DeleteDirectory(params *DeleteDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDirectory",
		Method:             "DELETE",
		PathPattern:        "/directory/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFile deletes a file
*/
func (a *Client) DeleteFile(params *DeleteFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFile",
		Method:             "DELETE",
		PathPattern:        "/files/{fileID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFilepath deletes a file
*/
func (a *Client) DeleteFilepath(params *DeleteFilepathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilepathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilepathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFilepath",
		Method:             "DELETE",
		PathPattern:        "/home/{filePath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFilepathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFilepathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFilepathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFileInfo gets file info
*/
func (a *Client) GetFileInfo(params *GetFileInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileInfo",
		Method:             "GET",
		PathPattern:        "/files/{fileID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePathInfo gets file info
*/
func (a *Client) GetFilePathInfo(params *GetFilePathInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePathInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePathInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilePathInfo",
		Method:             "GET",
		PathPattern:        "/home/{filePath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFilePathInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePathInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilePathInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDirPathInfo gets directory info
*/
func (a *Client) ListDirPathInfo(params *ListDirPathInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDirPathInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDirPathInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDirPathInfo",
		Method:             "GET",
		PathPattern:        "/directoryPath/{dirPath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDirPathInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDirPathInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDirPathInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListDirectory lists directory

  Lists the files in a directory on the server specified by the directory's ID
*/
func (a *Client) ListDirectory(params *ListDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDirectory",
		Method:             "GET",
		PathPattern:        "/directory/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListHomeDirectory lists home directory

  List the contents of the user's home (root) directory
*/
func (a *Client) ListHomeDirectory(params *ListHomeDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListHomeDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHomeDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listHomeDirectory",
		Method:             "GET",
		PathPattern:        "/directory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListHomeDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListHomeDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListHomeDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateFileByID updates a file

  Update a files directory or filename
*/
func (a *Client) UpdateFileByID(params *UpdateFileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFileByID",
		Method:             "PATCH",
		PathPattern:        "/files/{fileID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateFileByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateFileByPath updates a file

  Update a files directory or filename
*/
func (a *Client) UpdateFileByPath(params *UpdateFileByPathParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFileByPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFileByPathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFileByPath",
		Method:             "PATCH",
		PathPattern:        "/home/{filePath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFileByPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFileByPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateFileByPathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
