// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xy3/synche/src/client/models"
)

// UpdateFileByPathReader is a Reader for the UpdateFileByPath structure.
type UpdateFileByPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFileByPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFileByPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateFileByPathUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateFileByPathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateFileByPathDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateFileByPathOK creates a UpdateFileByPathOK with default headers values
func NewUpdateFileByPathOK() *UpdateFileByPathOK {
	return &UpdateFileByPathOK{}
}

/* UpdateFileByPathOK describes a response with status code 200, with default header values.

OK
*/
type UpdateFileByPathOK struct {
	Payload *models.File
}

func (o *UpdateFileByPathOK) Error() string {
	return fmt.Sprintf("[PATCH /home/{filePath}][%d] updateFileByPathOK  %+v", 200, o.Payload)
}
func (o *UpdateFileByPathOK) GetPayload() *models.File {
	return o.Payload
}

func (o *UpdateFileByPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFileByPathUnauthorized creates a UpdateFileByPathUnauthorized with default headers values
func NewUpdateFileByPathUnauthorized() *UpdateFileByPathUnauthorized {
	return &UpdateFileByPathUnauthorized{}
}

/* UpdateFileByPathUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateFileByPathUnauthorized struct {
}

func (o *UpdateFileByPathUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /home/{filePath}][%d] updateFileByPathUnauthorized ", 401)
}

func (o *UpdateFileByPathUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFileByPathNotFound creates a UpdateFileByPathNotFound with default headers values
func NewUpdateFileByPathNotFound() *UpdateFileByPathNotFound {
	return &UpdateFileByPathNotFound{}
}

/* UpdateFileByPathNotFound describes a response with status code 404, with default header values.

File not found
*/
type UpdateFileByPathNotFound struct {
}

func (o *UpdateFileByPathNotFound) Error() string {
	return fmt.Sprintf("[PATCH /home/{filePath}][%d] updateFileByPathNotFound ", 404)
}

func (o *UpdateFileByPathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFileByPathDefault creates a UpdateFileByPathDefault with default headers values
func NewUpdateFileByPathDefault(code int) *UpdateFileByPathDefault {
	return &UpdateFileByPathDefault{
		_statusCode: code,
	}
}

/* UpdateFileByPathDefault describes a response with status code -1, with default header values.

Error
*/
type UpdateFileByPathDefault struct {
	_statusCode int

	Payload models.Error
}

// Code gets the status code for the update file by path default response
func (o *UpdateFileByPathDefault) Code() int {
	return o._statusCode
}

func (o *UpdateFileByPathDefault) Error() string {
	return fmt.Sprintf("[PATCH /home/{filePath}][%d] updateFileByPath default  %+v", o._statusCode, o.Payload)
}
func (o *UpdateFileByPathDefault) GetPayload() models.Error {
	return o.Payload
}

func (o *UpdateFileByPathDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
