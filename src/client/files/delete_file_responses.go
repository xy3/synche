// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xy3/synche/src/client/models"
)

// DeleteFileReader is a Reader for the DeleteFile structure.
type DeleteFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDeleteFileDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteFileOK creates a DeleteFileOK with default headers values
func NewDeleteFileOK() *DeleteFileOK {
	return &DeleteFileOK{}
}

/* DeleteFileOK describes a response with status code 200, with default header values.

Deleted
*/
type DeleteFileOK struct {
}

func (o *DeleteFileOK) Error() string {
	return fmt.Sprintf("[DELETE /files/{fileID}][%d] deleteFileOK ", 200)
}

func (o *DeleteFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFileDefault creates a DeleteFileDefault with default headers values
func NewDeleteFileDefault(code int) *DeleteFileDefault {
	return &DeleteFileDefault{
		_statusCode: code,
	}
}

/* DeleteFileDefault describes a response with status code -1, with default header values.

Error
*/
type DeleteFileDefault struct {
	_statusCode int

	Payload models.Error
}

// Code gets the status code for the delete file default response
func (o *DeleteFileDefault) Code() int {
	return o._statusCode
}

func (o *DeleteFileDefault) Error() string {
	return fmt.Sprintf("[DELETE /files/{fileID}][%d] deleteFile default  %+v", o._statusCode, o.Payload)
}
func (o *DeleteFileDefault) GetPayload() models.Error {
	return o.Payload
}

func (o *DeleteFileDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
