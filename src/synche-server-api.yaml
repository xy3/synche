swagger: '2.0'

host: 127.0.0.1:9449
basePath: /v1/api
schemes:
  - http

info:
  description: Synche Server API
  version: 1.0.0
  title: Synche
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
  - name: files
    description: File and directory endpoints
  - name: transfer
    description: File transfer requests
  - name: users
    description: User authorization

securityDefinitions:
  AccessToken:
    type: apiKey
    in: header
    name: X-Token
  RefreshToken:
    type: apiKey
    in: header
    name: X-Refresh-Token

# Set the default security for all requests
security:
  - AccessToken: [ ]

consumes:
  - application/json
produces:
  - application/json

paths:
  /download/{fileID}:
    parameters:
      - in: path
        name: fileID
        type: integer
        required: true
    get:
      produces:
        - application/octet-stream
      summary: Download a file
      operationId: downloadFile
      tags:
        - transfer
      responses:
        200:
          description: OK
          schema:
            type: file
          headers:
            Content-Length:
              type: integer
              format: uint
            Content-Disposition:
              type: string
              pattern: attachment; filename="attachement.txt"
        403:
          description: Forbidden
        401:
          description: Unauthorized
        404:
          description: File not found
        default:
          description: error
          schema:
            $ref: '#/definitions/Error'

  /directory:
    get:
      tags:
        - files
      operationId: listHomeDirectory
      summary: List home directory
      description: List the contents of the user's home (root) directory
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DirectoryContents'
        401:
          description: Unauthorized
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    put:
      parameters:
        - in: query
          type: string
          name: directoryName
          required: true
          description: the name of the new directory
        - in: query
          type: integer
          format: uint
          name: parentDirectoryID
          required: false
          description: the ID of the parent directory, no ID means the directory is created the user's home directory
      tags:
        - files
      summary: Create a new directory
      operationId: createDirectory
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Directory'
        401:
          description: Unauthorized
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /directory/{id}:
    parameters:
      - in: path
        type: integer
        format: uint
        name: id
        required: true
    get:
      tags:
        - files
      operationId: listDirectory
      description: Lists the files in a directory on the server specified by the directory's ID
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DirectoryContents'
        401:
          description: Unauthorized
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
      summary: List directory
    delete:
      tags:
        - files
      summary: remove a certain directory
      operationId: deleteDirectory
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        501:
          description: Not implemented
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /files/{fileID}:
    parameters:
      - in: path
        name: fileID
        type: integer
        format: uint
        required: true
    get:
      summary: Get file info
      operationId: getFileInfo
      tags:
        - files
      responses: &GET_FILE_RESPONSES
        200:
          description: OK
          schema:
            $ref: '#/definitions/File'
        401:
          description: Unauthorized
        404:
          description: File not found
    delete:
      summary: Delete a file
      tags:
        - files
      operationId: deleteFile
      responses: &DELETE_FILE_RESPONSES
        200:
          description: Deleted
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - files
      summary: Update a file
      operationId: updateFileByID
      description: Update a files directory or filename
      parameters:
        - in: body
          name: fileUpdate
          schema:
             $ref: '#/definitions/FileUpdate'
      responses: &UPDATE_FILE_RESPONSES
        200:
          description: OK
          schema:
            $ref: '#/definitions/File'
        401:
          description: Unauthorized
        404:
          description: File not found
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /directoryPath/{dirPath}:
    parameters:
      - in: path
        name: dirPath
        type: string
        required: true
    get:
      tags:
        - files
      summary: Get directory info
      operationId: listDirPathInfo
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DirectoryContents'
        401:
          description: Unauthorized
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - files
      summary: Remove a certain directory
      operationId: deleteDirPath
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        501:
          description: Not implemented
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - files
      summary: Create a new directory
      operationId: createDirPath
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Directory'
        401:
          description: Unauthorized
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /home/{filePath}:
    parameters:
      - in: path
        name: filePath
        type: string
        required: true
    get:
      summary: Get file info
      operationId: getFilePathInfo
      tags:
        - files
      responses: *GET_FILE_RESPONSES
    delete:
      summary: Delete a file
      tags:
        - files
      operationId: deleteFilepath
      responses: *DELETE_FILE_RESPONSES
    patch:
      tags:
        - files
      summary: Update a file
      operationId: updateFileByPath
      description: Update a files directory or filename
      parameters:
        - in: body
          name: fileUpdate
          schema:
            $ref: '#/definitions/FileUpdate'
      responses: *UPDATE_FILE_RESPONSES

  /login:
    post:
      summary: User login
      security: [ ]
      tags:
        - users
      parameters:
        - in: query
          name: email
          type: string
          required: true
        - in: query
          name: password
          type: string
          required: true
      operationId: login
      responses:
        200:
          description: Logged in
          schema:
            $ref: '#/definitions/AccessAndRefreshToken'
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /register:
    post:
      summary: Register user
      operationId: register
      security: [ ]
      tags:
        - users
      parameters:
        - in: query
          name: email
          type: string
          required: true
        - in: query
          name: password
          type: string
          required: true
        - in: query
          name: name
          type: string
          required: false
        - in: query
          name: picture
          type: string
          required: false
      responses:
        200:
          description: Registered successfully
          schema:
            $ref: '#/definitions/User'
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /token/refresh:
    post:
      operationId: refreshToken
      security:
        - RefreshToken: [ ]
      tags:
        - tokens
      responses:
        200:
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/AccessToken'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: Refresh an Access token

  /user:
    get:
      tags:
        - users
      operationId: profile
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
      summary: Get user info
    delete:
      tags:
        - users
      operationId: deleteUser
      parameters:
        - in: query
          name: email
          type: string
          required: true
      responses:
        200:
          description: OK
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /upload/chunk:
    post:
      tags:
        - transfer
      summary: Upload a file chunk
      operationId: uploadChunk
      description: Uploads a new chunk to the Synche server
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: chunkData
          type: file
          required: true
          description: Chunk file data
        - in: formData
          name: chunkHash
          type: string
          required: true
          description: The file hash of the chunk
        - in: formData
          name: chunkNumber
          type: integer
          required: true
          description: The position index of the chunk in the file the chunk is from
        - in: formData
          name: fileID
          type: integer
          format: uint
          required: true
          description: The identifier for the composite file
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/FileChunk'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /upload/check:
    post:
      tags:
        - transfer
      summary: Gets the chunks that are already on the server
      operationId: checkUploadedChunks
      parameters:
        - in: query
          name: fileID
          type: integer
          format: uint
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ExistingChunks'
        401:
          description: Unauthorised
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /upload/new:
    post:
      tags:
        - transfer
      summary: Create a new file upload
      operationId: newUpload
      description: To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file
      parameters:
        - in: query
          name: fileName
          required: true
          type: string
          description: the original name of the file
        - in: query
          name: fileSize
          required: true
          type: integer
          description: the size of the file in bits
        - in: query
          name: fileHash
          required: true
          type: string
          description: the hash of the entire file
        - in: query
          name: numChunks
          required: true
          type: integer
          description: the number of chunks the server should expect
        - in: query
          name: directoryID
          required: false
          type: integer
          format: uint
          description: the target storage directory for the file. Leave blank to upload to your home directory
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/File'
        401:
          description: Unauthorized
        501:
          description: Not implemented
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'

definitions:
  AccessToken:
    type: object
    properties:
      accessToken:
        type: string
    description: Access token to authenticate a user.

  AccessAndRefreshToken:
    type: object
    properties:
      accessToken:
        type: string
      accessTokenExpiry:
        description: the unix timestamp expiry of the access token
        type: integer
        format: int64
      refreshToken:
        type: string
    description: Contains both the AccessToken and RefreshToken for a user.

  FileUpdate:
    type: object
    description: The file attributes to update
    minProperties: 1
    properties:
      NewFileName:
        type: string
      NewFilePath:
        type: string
      NewDirectoryID:
        type: integer
        format: uint

  Chunk:
    type: object
    properties:
      ID:
        type: integer
        format: uint
      Hash:
        type: string
      Size:
        type: integer
        format: int64
    description: A file chunk

  Directory:
    type: object
    properties:
      ID:
        type: integer
        format: uint
      Name:
        type: string
      Path:
        type: string
      PathHash:
        type: string
      ParentDirectoryID:
        type: integer
        format: uint
      FileCount:
        type: integer
        format: uint
        default: 0
    description: Directory information

  DirectoryContents:
    type: object
    properties:
      CurrentDir:
        $ref: '#/definitions/Directory'
      SubDirectories:
        type: array
        items:
          $ref: '#/definitions/Directory'
      Files:
        type: array
        items:
          $ref: '#/definitions/File'
    description: The sub-directories and files within a directory

  Error:
    type: string
    example: error message
    description: An error message from the server

  File:
    type: object
    properties:
      ID:
        type: integer
        format: uint
      DirectoryID:
        type: integer
        format: uint
      Hash:
        type: string
      Name:
        type: string
      Size:
        type: integer
        format: int64
      Available:
        type: boolean
      TotalChunks:
        type: integer
      ChunksReceived:
        type: integer
    description: File information

  FileChunk:
    type: object
    properties:
      ID:
        type: integer
        format: uint
      Number:
        type: integer
        description: the position of the chunk in the file
      Chunk:
        $ref: '#/definitions/Chunk'
      FileID:
        type: integer
        format: uint
    description: A chunk with a reference to the file it is a part of

  ExistingChunks:
    type: object
    required:
      - chunkNumbers
    properties:
      chunkNumbers:
        type: array
        items:
          type: integer
          format: int64

  User:
    type: object
    required:
      - email
      - id
      - name
      - picture
      - role
    properties:
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: integer
        format: uint
      name:
        type: string
      picture:
        type: string
      role:
        type: string
        enum:
          - member
          - admin
    description: User profile information
