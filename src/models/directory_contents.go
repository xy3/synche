// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DirectoryContents The sub-directories and files within a directory
//
// swagger:model DirectoryContents
type DirectoryContents struct {

	// current dir
	CurrentDir *Directory `json:"CurrentDir,omitempty"`

	// files
	Files []*File `json:"Files"`

	// sub directories
	SubDirectories []*Directory `json:"SubDirectories"`
}

// Validate validates this directory contents
func (m *DirectoryContents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubDirectories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryContents) validateCurrentDir(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentDir) { // not required
		return nil
	}

	if m.CurrentDir != nil {
		if err := m.CurrentDir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentDir")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentDir")
			}
			return err
		}
	}

	return nil
}

func (m *DirectoryContents) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DirectoryContents) validateSubDirectories(formats strfmt.Registry) error {
	if swag.IsZero(m.SubDirectories) { // not required
		return nil
	}

	for i := 0; i < len(m.SubDirectories); i++ {
		if swag.IsZero(m.SubDirectories[i]) { // not required
			continue
		}

		if m.SubDirectories[i] != nil {
			if err := m.SubDirectories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubDirectories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubDirectories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this directory contents based on the context it is used
func (m *DirectoryContents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentDir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubDirectories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryContents) contextValidateCurrentDir(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentDir != nil {
		if err := m.CurrentDir.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentDir")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentDir")
			}
			return err
		}
	}

	return nil
}

func (m *DirectoryContents) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {
			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DirectoryContents) contextValidateSubDirectories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubDirectories); i++ {

		if m.SubDirectories[i] != nil {
			if err := m.SubDirectories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubDirectories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SubDirectories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryContents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryContents) UnmarshalBinary(b []byte) error {
	var res DirectoryContents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
